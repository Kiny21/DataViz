<!-- Code from d3-graph-gallery.com -->
<!DOCTYPE html>
<meta charset="utf-8">

<!-- Load d3.js -->
<script src="https://d3js.org/d3.v4.js"></script>

<!-- Function for radial charts -->
<script src="https://cdn.jsdelivr.net/gh/holtzy/D3-graph-gallery@master/LIB/d3-scale-radial.js"></script>

<!-- Create a div where the graph will take place -->
<div id="my_dataviz"></div>


<script>

// set the dimensions and margins of the graph
var margin = {top: 10, right: 10, bottom: 10, left: 10},
    width = 540 - margin.left - margin.right,
    height = 540 - margin.top - margin.bottom,
    innerRadius = 80,
    outerRadius = Math.min(width, height) / 2;   // the outerRadius goes from the middle of the SVG area to the border

// append the svg object to the body of the page
var svg = d3.select("#my_dataviz")
  .append("svg")
    .attr("width", width + margin.left + margin.right+100)
    .attr("height", height + margin.top + margin.bottom+100)
  .append("g")
    .attr("transform", "translate(" + (width / 2+50) + "," + ( height/2+100 )+ ")"); // Add 100 on Y translation, cause upper bars are longer, and 50 on X

d3.csv("https://raw.githubusercontent.com/Kiny21/DataViz/main/mxmh_survey_results.csv", function(data) {
  // Convert the "Hours_per_day" a values to numeric
  data.forEach(function(d) {
    d.Hours_per_day = +d.Hours_per_day;    
  });

// Create data = list of groups
var allGroup = ["Anxiety", "Depression", "Insomnia", "OCD"]
// Initialize the button
var dropdownButton = d3.select("#my_dataviz")
  .append('select')

// add the options to the button
dropdownButton // Add a button
  .selectAll('myOptions') // Next 4 lines add 6 options = 6 colors
 	.data(allGroup)
  .enter()
	.append('option')
  .text(function (d) { return d; }) // text showed in the menu
  .attr("value", function (d) { return d; }) // corresponding value returned by the button



  // Group the data by Hours_per_day and calculate the average depression value for each group
  var groupedData = d3.nest()
    .key(function(d) { return d.Hours_per_day; })
    .rollup(function(group) {
      return {
	  averageDepression:d3.mean(group, function(d) { return d.Depression; }),
	  averageOCD:d3.mean(group, function(d) { return d.OCD; }),
	  averageAnxiety:d3.mean(group, function(d) { return d.Anxiety; }),
	  averageInsomnia:d3.mean(group, function(d) { return d.Insomnia; })
    };
	})
    .entries(data);

  // Sort the grouped data by Hours_per_day
  groupedData.sort(function(a, b) {
    return a.key - b.key;
  });

  // X scale
  var x = d3.scaleBand()
      .range([0, 2 * Math.PI])
      .align(0)
      .domain(groupedData.map(function(d) { return d.key; }));

  // Y scale
  var y = d3.scaleRadial()
      .range([innerRadius, outerRadius])
      .domain([0, d3.max(groupedData, function(d) { return d.value.averageInsomnia; })]);

  // Add bars
  svg.append("g")
	.attr("id","depression-bars")
    .selectAll("path")
    .data(groupedData)
    .enter()
    .append("path")
      .attr("fill", "#69b3a2")
      .attr("d", d3.arc()
          .innerRadius(innerRadius)
          .outerRadius(function(d) { return y(d.value.averageDepression); })
          .startAngle(function(d) { return x(d.key); })
          .endAngle(function(d) { return x(d.key) + x.bandwidth(); })
          .padAngle(0.01)
          .padRadius(innerRadius));

  // Add the labels
  svg.append("g")
    .selectAll("g")
    .data(groupedData)
    .enter()
    .append("g")
      .attr("text-anchor", function(d) { return (x(d.key) + x.bandwidth() / 2 + Math.PI) % (2 * Math.PI) < Math.PI ? "end" : "start"; })
      .attr("transform", function(d) { return "rotate(" + ((x(d.key) + x.bandwidth() / 2) * 180 / Math.PI - 90) + ")" + "translate(" + (y(d.value.averageInsomnia) + 20) + ",0)"; })
    .append("text")
      .text(function(d) { return d.key; })
      .attr("transform", function(d) { return (x(d.key) + x.bandwidth() / 2 + Math.PI) % (2 * Math.PI) < Math.PI ? "rotate(180)" : "rotate(0)"; })
      .style("font-size", "11px")
      .attr("alignment-baseline", "middle");
	  
	  
	    // Add bars
  svg.append("g")
    .selectAll("path")
    .data(groupedData)
    .enter()
    .append("path")
      .attr("fill", "#ff0000")
      .attr("d", d3.arc()
          .innerRadius(innerRadius)
          .outerRadius(function(d) { return y(d.value.averageOCD); })
          .startAngle(function(d) { return x(d.key); })
          .endAngle(function(d) { return x(d.key) + x.bandwidth(); })
          .padAngle(0.01)
          .padRadius(innerRadius));
		  
		// Add bars
  svg.append("g")
    .selectAll("path")
    .data(groupedData)
    .enter()
    .append("path")
	.attr("id","anxiety-bars")
      .attr("fill", "#ffff00")
      .attr("d", d3.arc()
          .innerRadius(innerRadius)
          .outerRadius(function(d) { return y(d.value.averageAnxiety); })
          .startAngle(function(d) { return x(d.key); })
          .endAngle(function(d) { return x(d.key) + x.bandwidth(); })
          .padAngle(0.01)
          .padRadius(innerRadius));
		  
		  
		    // Add bars
  svg.append("g")
    .selectAll("path")
    .data(groupedData)
    .enter()
    .append("path")
      .attr("fill", "#ff00ff")
      .attr("d", d3.arc()
          .innerRadius(innerRadius)
          .outerRadius(function(d) { return y(d.value.averageInsomnia); })
          .startAngle(function(d) { return x(d.key); })
          .endAngle(function(d) { return x(d.key) + x.bandwidth(); })
          .padAngle(0.01)
          .padRadius(innerRadius));
	  
// A function that shows or hides the anxiety bars
  function updateChart(selectedOption) {
    if (selectedOption === "Anxiety") {
      d3.selectAll(".anxiety-bar").style("display", "block");
    } else {
      d3.selectAll(".anxiety-bar").style("display", "none");
    }
  }

  // When the button is changed, run the updateChart function
  dropdownButton.on("change", function() {
    // recover the option that has been chosen
    var selectedOption = d3.select(this).property("value");
    // run the updateChart function with this selected option
    updateChart(selectedOption);
  });


	
		  
		  

});


</script>